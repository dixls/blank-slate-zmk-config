/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
// #define TBLE_MIT     1
#define TBLE_DUAL_2U 1

#define BASE  0
#define NUM_L 1
#define SYM_L 2
#define FUN_L 3
#define NAV_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L SYM_L>;
	    then-layer = <FUN_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
 &kp ESC    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &kp TAB    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp UP        &kp RSHFT
#else
  &kp Q      &kp W      &kp F       &kp P          &kp B   &none &none  &kp J            &kp L          &kp U       &kp Y      &kp QUOT
  &kp A      &kp R      &kp S       &kp T          &kp G   &none &none  &kp M            &kp N          &kp E       &kp I      &kp O
  &kp Z      &kp X      &kp C       &kp D          &kp V   &none &none  &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI
#endif
#ifdef TBLE_DUAL_2U
 &kp LCTRL  &kp LGUI   &kp LALT   &trans      &lt NUM_L SPACE               &lt SYM_L ENTER                 &trans      &kp LEFT   &kp DOWN     &kp RIGHT
#elif defined(TBLE_MIT)
 &trans &trans         &kp LCTRL  &kp LGUI    &kp LALT          &lt NAV_L SPACE                   &mo NUM_L       &kp RALT &kp RCTRL        &trans &trans
#else
 &trans &trans         &kp LCTRL  &kp LALT    &mo NAV_L      &shifty      &kp SPACE        &mo NUM_L      &kp RALT    &kp RCTRL          &trans &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp GRAVE   &kp N1     &kp N2     &kp N3     &kp N4     &kp N5      &kp N6       &kp N7      &kp N8      &kp N9       &kp N0     &kp BKSP
&kp PSCRN   &none      &none      &none      &none      &none       &none        &none       &kp MINUS   &kp EQUAL    &kp LBKT   &kp RBKT
&trans      &none      &none      &none      &none      &none       &none        &kp BSLH    &trans      &trans       &kp SLASH  &none   
#ifdef TBLE_DUAL_2U
&none       &none      &none      &none      &lt NUM_L SPACE        &lt SYM_L ENTER          &trans      &kp HOME     &kp DOT    &kp END     
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans  &trans       &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans &trans &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&kp TILDE  &kp EXCL   &kp AT     &kp HASH    &kp DLLR     &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR     &kp LPAR     &kp RPAR   &kp DEL
&trans     &none      &none      &none       &none        &kp F13      &trans     &trans    &kp UNDER    &kp PLUS     &kp LBRC   &kp RBRC
&trans     &none      &none      &none       &none        &none        &trans     &kp PIPE  &trans       &trans       &kp QMARK  &trans
#ifdef TBLE_DUAL_2U
&trans      &trans     &trans     &trans     &lt NUM_L SPACE           &lt SYM_L ENTER      &trans       &trans       &trans     &trans     
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp LS(N0)      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        nav_layer {
            label = "Fun";
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4      &kp F5          &kp F6       &kp F7     &kp F8        &kp F9      &kp F10    &kp F11    &kp F12
&none      &none      &none      &none       &none           &kp F13      &kp LARW   &kp DARW      &kp UARW    &kp RARW   &none      &none 
&none      &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &none      &none         &none       &none      &none      &none 
#ifdef TBLE_DUAL_2U
&none      &none      &none      &none       &none                        &none                    &none       &none      &none      &none      
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        nav_layer {
            label = "Sym";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
&trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };


    };
};

