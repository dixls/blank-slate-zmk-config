/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
 #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NUM_L 1
#define SYM_L 2
#define NAV_L 3


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_enter {
            timeout-ms = <45>;
            key-positions = <22 23>;
            bindings = <&kp RET>;
            layers = <1>;
        };
    };

    // behaviors {
    //     lt: layer-tap {
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         tapping-term-ms = <200>;
    //         quick-tap-ms = <0>;
    //         flavor = "balanced";
    //         bindings = <&kp>, <&kp>;
    //     };
    // };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <SYM_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
  &kp Q      &kp W      &kp E       &kp R          &kp T   &none &none  &kp Y            &kp U          &kp I       &kp O      &kp P
  &kp A      &kp S      &kp D       &kp F          &kp G   &none &none  &kp H            &kp J          &kp K       &kp L      &kp QUOT
  &kp Z      &kp X      &kp C       &kp V          &kp B   &kp F14 &kp F19  &kp N        &kp M          &kp COMMA   &kp DOT    &kp SEMI
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
#endif
#ifdef TBLE_DUAL_2U
 &kp LCTRL  &kp LGUI   &kp LALT   &mo NAV_L         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
#elif defined(TBLE_MIT)
 &kp LGUI    &kp LCTL   &kp LALT   &lt NAV_L TAB &lt NUM_L SPACE &kp SPACE  &lt SYM_L BKSP &kp RSHFT &kp RALT &kp RCTL &kp RGUI
#else
 &kp LCTRL  &mo SYM_L   &kp LGUI  &kp LALT    &mo NAV_L      &kp SPACE      &kp RET          &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
#endif
            >;
        };

        nav_layer {
            label = "Num";
            bindings = <
&kp N1      &kp N2     &kp N3     &kp N4     &kp N5     &none       &none    &kp N6      &kp N7      &kp N8      &kp N9      &kp N0
&kp LG(LS(4)) &none    &kp PLUS   &kp UNDER  &kp LBKT   &none       &none    &none       &kp MINUS   &kp EQUAL   &kp LBKT    &kp RBKT
&kp GRAVE   &kp LCTL   &kp LALT   &kp PIPE   &kp LBRC   &none       &none    &kp RBRC    &kp BSLH    &kp LT      &kp GT      &kp SLASH
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &trans      &trans           &none        &trans        &trans      &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        num_layer {
            label = "Sym";
            bindings = <
&kp EXCL   &kp AT     &kp HASH    &kp DLLR     &kp PRCNT  &none        &none      &kp CARET &kp AMPS     &kp STAR     &kp LPAR   &kp RPAR
&none      &none      &none      &none       &none        &none        &none      &kp LS(LARW) &kp LS(DARW) &kp LS(UARW) &kp LS(RARW) &none
&kp TILDE  &none      &none      &none       &none        &none        &none      &trans    &kp PIPE     &trans       &trans     &kp QMARK
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans       &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans &trans &trans
#endif
            >;
        };

        sym_layer {
            label = "Nav";
            bindings = <
&kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)   &kp LG(N5)  &bt BT(0)    &bt BT(1)  &kp LG(N6)     &kp LG(N7)   &kp LG(N8)  &kp LG(N9)  &kp LG(N0)
&trans     &trans     &trans     &trans      &trans          &bt BT(2)    &bt BT(3)  &trans         &trans     &trans      &trans     &trans
&kp LG(TILDE) &none   &none      &trans      &none           &bt BT_CLR   &trans     &none          &none       &none      &trans     &none
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &kp RPAR        &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };


    };
};

